
version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-webserver:
    build: ./airflow
    container_name: airflow-webserver
    restart: always
    user: "0"  # Run as root to have permissions to access docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      spark-master:
        condition: service_started
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__RBAC=False
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-apache-spark apache-airflow-providers-docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./data:/data
      - ./airflow/plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: webserver
    # The entrypoint is defined in the Dockerfile

  airflow-scheduler:
    build: ./airflow
    container_name: airflow-scheduler
    restart: always
    user: "0"  # Run as root to have permissions to access docker.sock
    depends_on:
      - postgres
      - spark-master
      - airflow-webserver
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-apache-spark apache-airflow-providers-docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./data:/data
      - ./airflow/plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: scheduler

  spark-master: # Spark Master
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "4041:4040"  # Spark UI
      - "7077:7077"  # Spark Master
      - "8080:8080"  # Spark Master Web UI
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.master.Master"]
      interval: 10s
      timeout: 5s
      retries: 3

  spark-worker:
    image: bitnami/spark:3.4
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      spark-master:
        condition: service_healthy
    volumes:
      - ./data:/data
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.worker.Worker"]
      interval: 10s
      timeout: 5s
      retries: 3

  java-client:
    build:
      context: .
      dockerfile: java-client/Dockerfile
    container_name: java-client
    volumes:
      - ./data/raw:/data/raw
    environment:
      - JAVA_OPTS=-Xmx512m
    working_dir: /app
    depends_on:
      spark-master:
        condition: service_healthy
      spark-worker:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"  # Prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # Grafana
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  data:
  postgres-db:
